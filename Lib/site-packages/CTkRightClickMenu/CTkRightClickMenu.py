from customtkinter import CTkToplevel,CTkFrame,CTkButton,set_default_color_theme
from sys import platform
from pywinstyles import apply_style
from hPyT import title_bar
class CTkRightClickMenu(CTkToplevel):
    def __init__(self,
                 master=None,
                 width=120,
                 height=None,
                 corner_radius=9,
                 border_width=2,
                 pad=0,
                 topmost : bool = True,
                 **kwargs):

        super().__init__(takefocus=1)
        set_default_color_theme("extreme.json")
        self.y = None
        self.x = None
        self.focus()
        self.width = width
        self.height = height
        self.master_window = master
        self.corner = corner_radius
        self.border = border_width
        self.hidden = True
        CTkFrame(self,height=4).pack()
        if topmost:
            self.attributes("-topmost", 1)
        if platform.startswith("win"):
            self.after(100, self.overrideredirect_win)
            self.resizable(0,0)
            self.transparent_color = self._apply_appearance_mode(self._fg_color)
            self.attributes("-transparentcolor", self.transparent_color)
        elif platform.startswith("darwin"):
            self.overrideredirect(True)
            self.transparent_color = 'systemTransparent'
            self.attributes("-transparent", True)
        else:
            self.attributes("-type", "splash")
            self.transparent_color = '#000001'
            self.corner = 0
            self.withdraw()
        if self.height==None:
                    self.sensitive_height=1
                    self.height = 2*pad+4
        self.frame = CTkFrame(self,fg_color=self.transparent_color,corner_radius=self.corner,
                                  border_width=self.border, **kwargs)
        self.frame.pack(expand=True, fill="both",pady=pad,padx=pad)

        self.master.bind("<Button-3>", lambda event: self.do_popup(event, self), add="+")
        self.master.bind("<ButtonPress>", lambda event: self._withdraw_off(), add="+")
        self.bind("<Button-1>", lambda event: self._withdraw(), add="+")
        self.master.bind("<Configure>", lambda event: self._withdraw(), add="+")

        self.resizable(width=False, height=False)
        self.transient(self.master_window)
        self.buttons=[]
        self.update_idletasks()

        self.withdraw()
    def overrideredirect_win(self):
        title_bar.hide(self)
    def _withdraw(self):
        self.withdraw()
        self.hidden = True

    def _withdraw_off(self):
        if self.hidden:
            self.withdraw()
        self.hidden = True

    def popup(self, x=None, y=None):
        self.x = x
        self.y = y
        
        self.deiconify()
        self.focus()
        self.geometry('{}x{}+{}+{}'.format(self.width, self.height, self.x, self.y))
        apply_style(self,"acrylic")
        self.hidden = False
    def add_button(self,text : str = "button",height=25,corner_radius=4, *args,**kwargs):
        self.buttons.append(CTkButton(self.frame,corner_radius=corner_radius,text=text,fg_color=self.transparent_color,height=height,*args,**kwargs))
        self.buttons[-1].pack(expand=True, fill="x",pady=0)
        self.height+=height
        self.geometry('{}x{}+{}+{}'.format(self.width, self.height, self.x, self.y))

    def do_popup(self,event, frame):
        try:
            frame.popup(event.x_root, event.y_root)
        finally:
            frame.grab_release()