from customtkinter import CTkFrame,ThemeManager,CTkButton,CTkImage
from PIL import Image
class CTkTableMini(CTkFrame):
    """ CTkTableMini Widget """
    
    def __init__(
        self,
        master: any,
        row: int = None,
        column: int = None,
        values: list = None,
        colors: list = [None, None],

        border_width: int = 0,

        border_color: str or tuple = "#ffffff",
        font: tuple = None,
        header_color: str or tuple = None,
        corner_radius: int = 25,

        command = None,
        command_2 = None,

        hover_color: str or tuple = None,
        row_height : int =30,
        defualt_colums : dict={},

        column_widths : list =[40],
        *arg):

        self.arg=arg
        self.command = command
        self.command_2 = command_2
        self.values = values
        self.column_widths=column_widths
        self.rows = row if row else len(values) # number of default rows
        self.columns = column if column else len(values[0])
        self.hover_color = ThemeManager.theme["CTkButton"]["hover_color"] if hover_color is None else hover_color
        self.font=font
        self.header=header_color
        self.colors=colors
        self.border_color = ThemeManager.theme["CTkButton"]["border_color"] if border_color is None else border_color
        self.columns = max([*[a+1 for a in list(defualt_colums.keys())],self.columns]) if len(list(defualt_colums.keys()))!=0 else self.columns
        self.fg_color = ThemeManager.theme["CTkFrame"]["fg_color"] if not self.colors[0] else self.colors[0]
        self.fg_color2 = ThemeManager.theme["CTkFrame"]["top_fg_color"] if not self.colors[1] else self.colors[1]
        self.defualt_colums=defualt_colums
        self.row_height=row_height
        if self.colors[0] is None and self.colors[1] is None:
            if self.fg_color==self.master.cget("fg_color"):
                self.fg_color = ThemeManager.theme["CTk"]["fg_color"]
            if self.fg_color2==self.master.cget("fg_color"):
                self.fg_color2 = ThemeManager.theme["CTk"]["fg_color"]
        self.fg_color_back=ThemeManager.theme["CTkFrame"]["fg_color"]
        super().__init__(master, fg_color=ThemeManager.theme["CTkFrame"]["fg_color"])
        super().configure(border_color=self.border_color, border_width=border_width, corner_radius=corner_radius)
        self.mainframe=CTkFrame(self)
        self.corner_radius=corner_radius
        self.cells={}
        self.column_special_commands={}
        self.mainframe.pack(padx=2,pady=2)
        self.draw()
    def draw_table(self,columns,column_widths,colors,values,font,us_command,start_row,pack=False):
        frame={}
        
        rows=len(values)
        for i in range(rows):
                        
            fg=colors[(i+start_row)%2]
            for j in range(columns):
                width = column_widths[j] if j < len(column_widths) else 120
                try:
                        
                    value = self.values[i+start_row][j]
                except :
                    try :
                        value = self.defualt_colums[j]
                        
                    except:
                        value = "      "
                    self.values[i+start_row].append(value)
                value=str(value)
                if value[-3:]!="***":

                
            
                    frame[i+start_row,j] = CTkButton(self.mainframe,
                                                                font=font, 
                                                                text=value,
                                                                width=width,
                                                                border_width=0,
                                                                border_color="#010101",
                                                                corner_radius=0,
                                                                fg_color=fg,
                                                                hover=False,
                                                                height=self.row_height,
                                                                background_corner_colors=[fg,fg,fg,fg])
                else:
                    print(value[:-3])
                    frame[i+start_row,j] = CTkButton(self.mainframe,
                                                                font=font, 
                                                                text="",
                                                                width=width,
                                                                border_width=0,
                                                                border_color="#010101",
                                                                corner_radius=0,
                                                                fg_color=fg,
                                                                hover=False,
                                                                height=self.row_height,
                                                                image=CTkImage(Image.open(value[:-3])),
                                                                background_corner_colors=[fg,fg,fg,fg])
                frame[i+start_row, j].bind("<Button-1>", lambda event, i=i+start_row, j=j, v=value: self.us_command(v, i, j))
                frame[i+start_row, j].bind("<Button-3>", lambda event, i=i+start_row, j=j, v=value: self.us_command_2(v, i, j))

        return frame
    def draw(self):
        self.cells.update(self.draw_table(columns=self.columns,column_widths=self.column_widths,colors=self.colors,values=self.values,font=self.font,us_command=self.us_command,start_row=0))
        if self.header is not None:
            for j in range(self.columns):
                self.cells[0,j].configure(fg_color=self.header)
            self.cells[0,0].configure(corner_radius=self.corner_radius,background_corner_colors=[self.fg_color_back,self.header,self.header,self.header])
            self.cells[0,self.columns-1].configure(corner_radius=10,background_corner_colors=[self.header,self.fg_color_back,self.header,self.header])
            


        else:
            self.cells[0,0].configure(corner_radius=self.corner_radius,background_corner_colors=[self.fg_color_back,self.fg_color,self.fg_color,self.fg_color])
            self.cells[0,self.columns-1].configure(corner_radius=10,background_corner_colors=[self.fg_color,self.fg_color_back,self.fg_color,self.fg_color])
        last_color=self.colors[1 if (self.rows%2)==0 else 0]
        self.LastColor=last_color
        self.cells[self.rows-1,self.columns-1].configure(corner_radius=10,background_corner_colors=[last_color,last_color,self.fg_color_back,last_color])
        self.cells[self.rows-1,0].configure(corner_radius=10,background_corner_colors=[last_color,last_color,last_color,self.fg_color_back])
        
        for i in range(self.rows):
            for j in range(self.columns):
                self.cells[i,j].grid(column=j, row=i,padx=(0,1),pady=(0,1) ,sticky="nsew")

        """for j in range(self.columns):
            self.mainframe.columnconfigure(j,weight=1)
            column_width = self.column_widths[j] if j < len(self.column_widths) else 100
            for i in range(self.rows):
                self.cells[i,j].configure(width=column_width)"""
        

        ########################################
        #######################################
    def us_command(self,value,i,j):
        if j not in list(self.column_special_commands.keys()):
            self.command({"value":value,"row":i,"column":j})
        else:
            self.column_special_commands[j][0]({"value":value,"row":i,"column":j})
    def us_command_2(self,value,i,j):
        if j not in list(self.column_special_commands.keys()):
            self.command_2({"value":value,"row":i,"column":j})
        else:
            self.column_special_commands[j][1]({"value":value,"row":i,"column":j})
    def update_values_old(self,values):
        for i in self.cells.values():
            i.destroy()
        self.frame = {}
        self.values = values
        self.rows = len(values) # number of default rows
        self.columns = len(values[0])
        self.draw()
    def add_row(self, value):
        # Mevcut son satırın köşe yarıçaplarını sıfırla
        try:
            self.cells[self.rows - 1, self.columns - 1].configure(corner_radius=0, background_corner_colors=[self.fg_color_back, self.fg_color_back, self.fg_color_back, self.fg_color_back])
            self.cells[self.rows - 1, 0].configure(corner_radius=0, background_corner_colors=[self.fg_color_back, self.fg_color_back, self.fg_color_back, self.fg_color_back])
        except:
            pass
        if len(self.values)==1:
            self.cells[self.rows - 1, self.columns - 1].configure(corner_radius=self.corner_radius, background_corner_colors=[self.LastColor,self.fg_color_back,self.LastColor,self.LastColor])
            self.cells[self.rows - 1, 0].configure(corner_radius=self.corner_radius, background_corner_colors=[self.fg_color_back,self.LastColor,self.LastColor,self.LastColor])
        self.values.append(value)
        # Yeni satırı ekle
        new_cells = self.draw_table(columns=self.columns, column_widths=self.column_widths, colors=self.colors, values=[value], font=self.font, us_command=self.us_command, start_row=self.rows, pack=True)
        self.cells.update(new_cells)

        # Yeni satırdaki hücreleri grid'e ekle
        for j in range(self.columns):
            self.cells[self.rows, j].grid(column=j, row=self.rows, padx=(0, 1), pady=(0, 1), sticky="nsew")

        self.rows += 1

        # Yeni son satırın köşe yarıçaplarını ayarla
        last_color = self.colors[1 if (self.rows % 2) == 0 else 0]
        self.LastColor = last_color
        self.cells[self.rows - 1, self.columns - 1].configure(corner_radius=self.corner_radius, background_corner_colors=[last_color, last_color, self.fg_color_back, last_color])
        self.cells[self.rows - 1, 0].configure(corner_radius=self.corner_radius, background_corner_colors=[last_color, last_color, last_color, self.fg_color_back])
        if len(self.values)==1:
            self.cells[0,0].configure(corner_radius=self.corner_radius,background_corner_colors=[self.fg_color_back,last_color,last_color,self.fg_color_back])
            self.cells[0,self.columns-1].configure(corner_radius=self.corner_radius,background_corner_colors=[last_color,self.fg_color_back,self.fg_color_back,last_color])
        



    def remove_row(self, row_index):
        # Belirtilen satırı sil
        for j in range(self.columns):
            cell = self.cells.pop((row_index, j), None)
            if cell:
                cell.destroy()
        del self.values[row_index]
        # Kalan hücreleri yeniden düzenle ve renklerini güncelle
        new_cells = {}
        for (i, j), cell in self.cells.items():
            if i > row_index:
                # Satır indeksi bir eksiltilerek yeni pozisyona taşınır
                new_row = i - 1
                fg = self.colors[new_row % 2]
                new_cells[(new_row, j)] = cell
                cell.grid(column=j, row=new_row, padx=(0, 1), pady=(0, 1), sticky="nsew")
                cell.configure(fg_color=fg)

                cell.unbind("<Button-1>")
                cell.unbind("<Button-3>")


                value=cell.cget("text")
                cell.bind("<Button-1>", lambda event, i=new_row, j=j, v=value: self.us_command(v, i, j))
                cell.bind("<Button-3>", lambda event, i=new_row, j=j, v=value: self.us_command_2(v, i, j))
            else:
                # Diğer hücreler aynı kalır
                new_cells[(i, j)] = cell

        self.cells = new_cells
        self.rows -= 1

        # Son hücrelerin köşe yarıçaplarını güncelle
        if self.rows > 0:
            last_color = self.colors[1 if (self.rows % 2) == 0 else 0]
            self.LastColor = last_color
            self.cells[self.rows - 1, self.columns - 1].configure(corner_radius=10, background_corner_colors=[last_color, last_color, self.fg_color_back, last_color])
            self.cells[self.rows - 1, 0].configure(corner_radius=10, background_corner_colors=[last_color, last_color, last_color, self.fg_color_back])
        if self.rows==1:
            self.cells[0,0].configure(corner_radius=self.corner_radius,background_corner_colors=[self.fg_color_back,last_color,last_color,self.fg_color_back])
            self.cells[0,self.columns-1].configure(corner_radius=self.corner_radius,background_corner_colors=[last_color,self.fg_color_back,self.fg_color_back,last_color])

    def update_command(self,dict_):
        
        cell=self.cells[dict_["row"],dict_["column"]]
        cell.unbind("<Button-1>")
        cell.unbind("<Button-3>")


        value=cell.cget("text")
        cell.bind("<Button-1>", lambda event, i=dict_["row"], j=dict_["column"], v=value: self.us_command(v, i, j))
        cell.bind("<Button-3>", lambda event, i=dict_["row"], j=dict_["column"], v=value: self.us_command_2(v, i, j))    
    def column_special_command(self,column,command_1,command_2=None):
        if command_2 is None:
            command_2=lambda:print("",end="")
        self.column_special_commands[column]=[command_1,command_2]
        for i in range(self.rows):
            cell=self.cells[i,column]
            cell.unbind("<Button-1>")
            cell.unbind("<Button-3>")


            value=cell.cget("text")
            cell.bind("<Button-1>", lambda event, i=i, j=column, v=value: self.us_command(v, i, j))
            cell.bind("<Button-3>", lambda event, i=i, j=column, v=value: self.us_command_2(v, i, j))
    def update_values(self,values):
        for i in range(self.rows):
            for j in range(self.columns):
                try:
                            
                    value = values[i][j]
                except IndexError: value = " "
                self.cells[i,j].configure(text=value)
   
    def update_one_value(self,value,dict_ : dict = None,row : int =None,column : int = None):
        if dict_ is None:
            dict_={"row":row,"column":column}
        self.values[dict_["row"]][dict_["column"]]=value
        self.cells[dict_["row"],dict_["column"]].configure(text=value)
        self.update_command(dict_)


        